// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TFP.Persistence.Context;

namespace TFP.Persistence.Migrations
{
    [DbContext(typeof(TfpContext))]
    [Migration("20171224100506_User_RemovedLogin")]
    partial class User_RemovedLogin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("Relational:Sequence:.AlbumId", "'AlbumId', '', '1', '10', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.ApiKeyId", "'ApiKeyId', '', '1', '10', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.CommentId", "'CommentId', '', '1', '10', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.IndividualId", "'IndividualId', '', '1', '10', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.MessageId", "'MessageId', '', '1', '10', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.PhotoId", "'PhotoId', '', '1', '10', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.SocialId", "'SocialId', '', '1', '10', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.TfpEventId", "'TfpEventId', '', '1', '10', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(NEXT VALUE FOR [Catalog].[AlbumId])");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<Guid>("IndividualId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ModifiedId");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<bool>("Nude");

                    b.Property<Guid>("PhotoId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("ModifiedId");

                    b.HasIndex("PhotoId");

                    b.ToTable("Album","Catalog");
                });

            modelBuilder.Entity("TFP.Domain.Entities.AlbumPhoto", b =>
                {
                    b.Property<Guid>("AlbumId");

                    b.Property<Guid>("PhotoId");

                    b.HasKey("AlbumId", "PhotoId");

                    b.HasIndex("AlbumId")
                        .HasName("IX_Catalog_AlbumPhoto_AlbumId");

                    b.HasIndex("PhotoId")
                        .HasName("IX_Catalog_AlbumPhoto_PhotoId");

                    b.ToTable("AlbumPhoto","Catalog");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UK_Lookup_Category_Name");

                    b.HasIndex("Order")
                        .HasName("IX_Lookup_Category_Order");

                    b.ToTable("Category","Lookup");
                });

            modelBuilder.Entity("TFP.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UK_Lookup_City_Name");

                    b.HasIndex("Order")
                        .HasName("IX_Lookup_City_Order");

                    b.ToTable("City","Lookup");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(NEXT VALUE FOR [Workflow].[CommentId])");

                    b.Property<Guid>("AuthorId");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ModifiedId");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<Guid>("RecipientId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ModifiedId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Comment","Workflow");
                });

            modelBuilder.Entity("TFP.Domain.Entities.HairColor", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UK_Lookup_HairColor_Name");

                    b.HasIndex("Order")
                        .HasName("IX_Lookup_HairColor_Order");

                    b.ToTable("HairColor","Lookup");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Individual", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(NEXT VALUE FOR [Membership].[IndividualId])");

                    b.Property<int>("CategoryId");

                    b.Property<int>("CityId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<byte[]>("Photo");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("Id")
                        .HasName("IX_Membership_Social_IndividualId");

                    b.ToTable("Individual","Membership");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(NEXT VALUE FOR [Workflow].[MessageId])");

                    b.Property<Guid>("AuthorId");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsReaded");

                    b.Property<Guid>("ModifiedId");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<Guid>("RecipientId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ModifiedId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Message","Workflow");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Model", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Breast");

                    b.Property<int>("Growth");

                    b.Property<int>("HairColorId");

                    b.Property<Guid>("ModifiedId");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<bool>("Nude");

                    b.Property<int>("Thighs");

                    b.Property<int>("Waist");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("HairColorId");

                    b.HasIndex("ModifiedId");

                    b.ToTable("Model","Membership");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("Order");

                    b.Property<Guid>("PermissionGroupId");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UK_Lookup_Permission_Name");

                    b.HasIndex("Order")
                        .HasName("IX_Lookup_Permission_Order");

                    b.HasIndex("PermissionGroupId")
                        .HasName("IX_Lookup_Permission_PermissionGroupId");

                    b.ToTable("Permission","Lookup");
                });

            modelBuilder.Entity("TFP.Domain.Entities.PermissionGroup", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UK_Lookup_PermissionGroup_Name");

                    b.HasIndex("Order")
                        .HasName("IX_Lookup_CourseStatus_Order");

                    b.ToTable("PermissionGroup","Lookup");
                });

            modelBuilder.Entity("TFP.Domain.Entities.PermissionSet", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UK_Membership_PermissionSet_Name");

                    b.ToTable("PermissionSet","Membership");
                });

            modelBuilder.Entity("TFP.Domain.Entities.PermissionSetPermission", b =>
                {
                    b.Property<int>("PermissionSetId");

                    b.Property<Guid>("PermissionId");

                    b.HasKey("PermissionSetId", "PermissionId");

                    b.HasIndex("PermissionId")
                        .HasName("IX_Membership_PermissionSetPermission_PermissionId");

                    b.HasIndex("PermissionSetId")
                        .HasName("IX_Membership_PermissionSetPermission_UserId");

                    b.ToTable("PermissionSetPermission","Membership");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(NEXT VALUE FOR [Catalog].[PhotoId])");

                    b.Property<Guid>("ModifiedId");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("ModifiedId");

                    b.ToTable("Photo","Catalog");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Photographer", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ModifiedId");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedId");

                    b.ToTable("Photographer","Membership");
                });

            modelBuilder.Entity("TFP.Domain.Entities.PhotographerShootingGenre", b =>
                {
                    b.Property<Guid>("PhotographerId");

                    b.Property<int>("ShootingGenreId");

                    b.HasKey("PhotographerId", "ShootingGenreId");

                    b.HasIndex("PhotographerId")
                        .HasName("IX_Membership_PhotographerShootingGenre_PhotographerId");

                    b.HasIndex("ShootingGenreId")
                        .HasName("IX_Membership_PhotographerShootingGenre_ShootingGenreId");

                    b.ToTable("PhotographerShootingGenre","Membership");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Responded", b =>
                {
                    b.Property<Guid>("TfpEventId");

                    b.Property<Guid>("IndividualId");

                    b.Property<DateTime>("CreatedOn");

                    b.HasKey("TfpEventId", "IndividualId");

                    b.HasIndex("IndividualId")
                        .HasName("IX_Workflow_Responded_IndividualId");

                    b.HasIndex("TfpEventId")
                        .HasName("IX_Workflow_Responded_TfpEventIdId");

                    b.ToTable("Responded","Workflow");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("TFP.Domain.Entities.ShootingGenre", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UK_Lookup_ShootingGenre_Name");

                    b.HasIndex("Order")
                        .HasName("IX_Lookup_ShootingGenre_Order");

                    b.ToTable("ShootingGenre","Lookup");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Social", b =>
                {
                    b.Property<Guid>("IndividualId");

                    b.Property<int>("SocialTypeId");

                    b.HasKey("IndividualId", "SocialTypeId");

                    b.HasIndex("SocialTypeId");

                    b.ToTable("Social","Membership");
                });

            modelBuilder.Entity("TFP.Domain.Entities.SocialType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("IX_Membership_Social_SocialTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UK_Lookup_SocialType_Name");

                    b.HasIndex("Order")
                        .HasName("IX_Lookup_SocialType_Order");

                    b.ToTable("SocialType","Lookup");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Stylist", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ModifiedId");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("StylistSpecializationId");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedId");

                    b.HasIndex("StylistSpecializationId");

                    b.ToTable("Stylist","Membership");
                });

            modelBuilder.Entity("TFP.Domain.Entities.StylistSpecialization", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UK_Lookup_StylistSpecialization_Name");

                    b.HasIndex("Order")
                        .HasName("IX_Lookup_StylistSpecialization_Order");

                    b.ToTable("StylistSpecialization","Lookup");
                });

            modelBuilder.Entity("TFP.Domain.Entities.TfpEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(NEXT VALUE FOR [Workflow].[TfpEventId])");

                    b.Property<Guid>("AuthorId");

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<DateTime>("HeldOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ModifiedId");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<Guid?>("PhotoId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CityId");

                    b.HasIndex("ModifiedId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasName("UK_Workflow_TfpEvent_Name");

                    b.ToTable("TfpEvent","Workflow");
                });

            modelBuilder.Entity("TFP.Domain.Entities.TfpEventPhoto", b =>
                {
                    b.Property<Guid>("TfpEventId");

                    b.Property<Guid>("PhotoId");

                    b.HasKey("TfpEventId", "PhotoId");

                    b.HasIndex("PhotoId")
                        .HasName("IX_Workflow_TfpEventPhoto_IndividualId");

                    b.HasIndex("TfpEventId")
                        .HasName("IX_Workflow_TfpEventPhoto_TfpEventId");

                    b.ToTable("TfpEventPhoto","Workflow");
                });

            modelBuilder.Entity("TFP.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Comment")
                        .HasMaxLength(512);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<int?>("InitialPermissionSetId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("InitialPermissionSetId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User","Membership");
                });

            modelBuilder.Entity("TFP.Domain.Entities.UserPermission", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("PermissionId");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId")
                        .HasName("IX_Membership_UserPermission_PermissionId");

                    b.HasIndex("UserId")
                        .HasName("IX_Membership_UserPermission_UserId");

                    b.ToTable("UserPermission","Membership");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TFP.Domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TFP.Domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TFP.Domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TFP.Domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TFP.Domain.Entities.Album", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Individual", "Individual")
                        .WithMany("AlbumIndividual")
                        .HasForeignKey("IndividualId")
                        .HasConstraintName("FK_Catalog_Album_Membership_Individual");

                    b.HasOne("TFP.Domain.Entities.Individual", "Modified")
                        .WithMany("AlbumModified")
                        .HasForeignKey("ModifiedId")
                        .HasConstraintName("FK_Catalog_Album_Membership_Individual1");

                    b.HasOne("TFP.Domain.Entities.Photo", "Photo")
                        .WithMany("Album")
                        .HasForeignKey("PhotoId")
                        .HasConstraintName("FK_Catalog_Album_Catalog_Photo");
                });

            modelBuilder.Entity("TFP.Domain.Entities.AlbumPhoto", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Album", "Album")
                        .WithMany("AlbumPhoto")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_Catalog_AlbumPhoto_Catalog_Album");

                    b.HasOne("TFP.Domain.Entities.Photo", "Photo")
                        .WithMany("AlbumPhoto")
                        .HasForeignKey("PhotoId")
                        .HasConstraintName("FK_Catalog_AlbumPhoto_Catalog_Photo");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Comment", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Individual", "Author")
                        .WithMany("CommentAuthor")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_Workflow_Comment_Membership_Individual");

                    b.HasOne("TFP.Domain.Entities.Individual", "Modified")
                        .WithMany("CommentModified")
                        .HasForeignKey("ModifiedId")
                        .HasConstraintName("FK_Workflow_Comment_Membership_Individual2");

                    b.HasOne("TFP.Domain.Entities.Individual", "Recipient")
                        .WithMany("CommentRecipient")
                        .HasForeignKey("RecipientId")
                        .HasConstraintName("FK_Workflow_Comment_Membership_Individual1");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Individual", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Category", "Category")
                        .WithMany("Individual")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Membership_Individual_Lookup_Category");

                    b.HasOne("TFP.Domain.Entities.City", "City")
                        .WithMany("Individual")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Membership_Individual_Lookup_City");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Message", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Individual", "Author")
                        .WithMany("MessageAuthor")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_Workflow_Message_Membership_Individual");

                    b.HasOne("TFP.Domain.Entities.Individual", "Modified")
                        .WithMany("MessageModified")
                        .HasForeignKey("ModifiedId")
                        .HasConstraintName("FK_Workflow_Message_Membership_Individual2");

                    b.HasOne("TFP.Domain.Entities.Individual", "Recipient")
                        .WithMany("MessageRecipient")
                        .HasForeignKey("RecipientId")
                        .HasConstraintName("FK_Workflow_Message_Membership_Individual1");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Model", b =>
                {
                    b.HasOne("TFP.Domain.Entities.HairColor", "HairColor")
                        .WithMany("Model")
                        .HasForeignKey("HairColorId")
                        .HasConstraintName("FK_Membership_Model_Lookup_HairColor");

                    b.HasOne("TFP.Domain.Entities.Individual", "IdNavigation")
                        .WithOne("ModelIdNavigation")
                        .HasForeignKey("TFP.Domain.Entities.Model", "Id")
                        .HasConstraintName("FK_Membership_Model_Id_Membership_Individual");

                    b.HasOne("TFP.Domain.Entities.Individual", "Modified")
                        .WithMany("ModelModified")
                        .HasForeignKey("ModifiedId")
                        .HasConstraintName("FK_Membership_Model_ModifiedId_Membership_Individual");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Permission", b =>
                {
                    b.HasOne("TFP.Domain.Entities.PermissionGroup", "PermissionGroup")
                        .WithMany("Permission")
                        .HasForeignKey("PermissionGroupId")
                        .HasConstraintName("FK_Lookup_Permission_Lookup_PermissionGroup");
                });

            modelBuilder.Entity("TFP.Domain.Entities.PermissionSetPermission", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Permission", "Permission")
                        .WithMany("PermissionSetPermission")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_Membership_PermissionSetPermission_Lookup_Permission");

                    b.HasOne("TFP.Domain.Entities.PermissionSet", "PermissionSet")
                        .WithMany("PermissionSetPermission")
                        .HasForeignKey("PermissionSetId")
                        .HasConstraintName("FK_Membership_PermissionSetPermission_Membership_PermissionSet");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Photo", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Individual", "Modified")
                        .WithMany("PhotoNavigation")
                        .HasForeignKey("ModifiedId")
                        .HasConstraintName("FK_Catalog_Photo_Membership_Individual");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Photographer", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Individual", "IdNavigation")
                        .WithOne("PhotographerIdNavigation")
                        .HasForeignKey("TFP.Domain.Entities.Photographer", "Id")
                        .HasConstraintName("FK_Membership_Photographer_Id_Membership_Individual");

                    b.HasOne("TFP.Domain.Entities.Individual", "Modified")
                        .WithMany("PhotographerModified")
                        .HasForeignKey("ModifiedId")
                        .HasConstraintName("FK_Membership_Photographer_ModifiedId_Membership_Individual");
                });

            modelBuilder.Entity("TFP.Domain.Entities.PhotographerShootingGenre", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Photographer", "Photographer")
                        .WithMany("PhotographerShootingGenre")
                        .HasForeignKey("PhotographerId")
                        .HasConstraintName("FK_Membership_PhotographerShootingGenre_Membership_Photographer");

                    b.HasOne("TFP.Domain.Entities.ShootingGenre", "ShootingGenre")
                        .WithMany("PhotographerShootingGenre")
                        .HasForeignKey("ShootingGenreId")
                        .HasConstraintName("FK_Membership_PhotographerShootingGenre_Membership_ShootingGenre");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Responded", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Individual", "Individual")
                        .WithMany("Responded")
                        .HasForeignKey("IndividualId")
                        .HasConstraintName("FK_Workflow_Responded_Membership_Individual");

                    b.HasOne("TFP.Domain.Entities.TfpEvent", "TfpEvent")
                        .WithMany("Responded")
                        .HasForeignKey("TfpEventId")
                        .HasConstraintName("FK_Workflow_Responded_Workflow_TfpEvent");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Social", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Individual", "Individual")
                        .WithMany("Social")
                        .HasForeignKey("IndividualId")
                        .HasConstraintName("FK_Membership_Social_Membership_Individual");

                    b.HasOne("TFP.Domain.Entities.SocialType", "SocialType")
                        .WithMany("Social")
                        .HasForeignKey("SocialTypeId")
                        .HasConstraintName("FK_Membership_Social_Membership_SocialType");
                });

            modelBuilder.Entity("TFP.Domain.Entities.Stylist", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Individual", "IdNavigation")
                        .WithOne("StylistIdNavigation")
                        .HasForeignKey("TFP.Domain.Entities.Stylist", "Id")
                        .HasConstraintName("FK_Membership_Stylist_Id_Membership_Individual");

                    b.HasOne("TFP.Domain.Entities.Individual", "Modified")
                        .WithMany("StylistModified")
                        .HasForeignKey("ModifiedId")
                        .HasConstraintName("FK_Membership_Stylist_ModifiedId_Membership_Individual");

                    b.HasOne("TFP.Domain.Entities.StylistSpecialization", "StylistSpecialization")
                        .WithMany("Stylist")
                        .HasForeignKey("StylistSpecializationId")
                        .HasConstraintName("FK_Membership_Stylist_Lookup_StylistSpecialization");
                });

            modelBuilder.Entity("TFP.Domain.Entities.TfpEvent", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Individual", "Author")
                        .WithMany("TfpEventAuthor")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_Workflow_TfpEvent_Membership_Individual");

                    b.HasOne("TFP.Domain.Entities.City", "City")
                        .WithMany("TfpEvent")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Membership_Individual_Lookup_City");

                    b.HasOne("TFP.Domain.Entities.Individual", "Modified")
                        .WithMany("TfpEventModified")
                        .HasForeignKey("ModifiedId")
                        .HasConstraintName("FK_Workflow_TfpEvent_Membership_Individual1");

                    b.HasOne("TFP.Domain.Entities.Photo", "Photo")
                        .WithMany("TfpEvent")
                        .HasForeignKey("PhotoId")
                        .HasConstraintName("FK_Workflow_TfpEvent_Catalog_Photo");
                });

            modelBuilder.Entity("TFP.Domain.Entities.TfpEventPhoto", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Photo", "Photo")
                        .WithMany("TfpEventPhoto")
                        .HasForeignKey("PhotoId")
                        .HasConstraintName("FK_Workflow_TfpEventPhoto_Catalog_Photo");

                    b.HasOne("TFP.Domain.Entities.TfpEvent", "TfpEvent")
                        .WithMany("TfpEventPhoto")
                        .HasForeignKey("TfpEventId")
                        .HasConstraintName("FK_Workflow_TfpEventPhoto_Workflow_TfpEvent");
                });

            modelBuilder.Entity("TFP.Domain.Entities.User", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Individual", "IdNavigation")
                        .WithOne("User")
                        .HasForeignKey("TFP.Domain.Entities.User", "Id")
                        .HasConstraintName("FK_Membership_User_Membership_Individual");

                    b.HasOne("TFP.Domain.Entities.PermissionSet", "InitialPermissionSet")
                        .WithMany("User")
                        .HasForeignKey("InitialPermissionSetId")
                        .HasConstraintName("FK_Membership_User_Membership_PermissionSet");
                });

            modelBuilder.Entity("TFP.Domain.Entities.UserPermission", b =>
                {
                    b.HasOne("TFP.Domain.Entities.Permission", "Permission")
                        .WithMany("UserPermission")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_Membership_UserPermission_Membership_Permission");

                    b.HasOne("TFP.Domain.Entities.User", "User")
                        .WithMany("UserPermission")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Membership_UserPermission_Membership_User");
                });
#pragma warning restore 612, 618
        }
    }
}
